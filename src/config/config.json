{
  "version": "0.0.0",
  "code": {
    "name": "TypeScript",
    "alias": "typescript",
    "types": [
      "string",
      "number",
      "boolean",
      "object",
      "any",
      "unknown",
      "null",
      "Array",
      "Set",
      "Map",
      "Date",
      "Buffer",
      "bigint",
      "void"
    ],
    "source_dir": "src"
  },
  "presets": [
    {
      "name": "default",
      "components": {
        "mapper": {
          "name_pattern": "{{pascal name}}{{pascal type}}Mapper",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/mappers/{{kebab name}}.{{kebab type}}.mapper.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true,
              "methods": [
                {
                  "name": "toEntity",
                  "params": [
                    {
                      "name": "model",
                      "type": "{{USE DEPENDENCY(WHERE type.isModel IS true).type}}"
                    }
                  ],
                  "return_type": "{{USE DEPENDENCY(WHERE type.isEntity IS true).type}}"
                },
                {
                  "name": "fromEntity",
                  "params": [
                    {
                      "name": "entity",
                      "type": "{{USE DEPENDENCY(WHERE type.isEntity IS true).type}}"
                    }
                  ],
                  "return_type": "{{USE DEPENDENCY(WHERE type.isModel IS true).type}}"
                }
              ]
            },
            "mongo": {
              "inheritance": [
                {
                  "name": "MongoMapper",
                  "generics": [
                    {
                      "dflt": "{{USE DEPENDENCY(WHERE type.isEntity IS true).element.name}}"
                    },
                    {
                      "dflt": "{{USE DEPENDENCY(WHERE type.isModel IS true).element.name}}"
                    }
                  ]
                }
              ],
              "interfaces": [],
              "imports": [
                {
                  "list": [
                    "MongoDB",
                    "MongoMapper"
                  ],
                  "path": "@soapjs/soap-node-mongo"
                }
              ]
            }
          }
        },
        "mapper_unit_tests": {
          "name_pattern": "{{pascal name}}MapperUnitTests",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/mappers/__tests__/{{kebab name}}.mapper.unit.test.ts",
          "element_type": "unit_tests",
          "defaults": {}
        },
        "collection": {
          "name_pattern": "{{pascal name}}{{pascal type}}Collection",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/collections/{{kebab name}}.{{kebab type}}.collection.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true
            },
            "mongo": {
              "ctor": {
                "params": [
                  {
                    "name": "dbSource",
                    "type": "MongoSource"
                  }
                ],
                "supr": {
                  "params": [
                    {
                      "name": "dbSource",
                      "type": "MongoSource"
                    },
                    {
                      "name": "table",
                      "type": "string",
                      "value": "{{USE ADDONS().table}}"
                    }
                  ]
                }
              },
              "inheritance": [
                {
                  "name": "MongoCollection",
                  "generics": [
                    {
                      "dflt": "{{USE DEPENDENCY(WHERE type.isModel IS true).element.name}}"
                    }
                  ]
                }
              ],
              "interfaces": [],
              "imports": [
                {
                  "list": [
                    "MongoSource",
                    "MongoCollection"
                  ],
                  "path": "@soapjs/soap-node-mongo"
                }
              ]
            }
          }
        },
        "collection_unit_tests": {
          "name_pattern": "{{pascal name}}CollectionUnitTests",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/collections/__tests__/{{kebab name}}.collection.unit.test.ts",
          "element_type": "unit_tests",
          "defaults": {}
        },
        "entity": {
          "name_pattern": "{{pascal name}}",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/entities/{{kebab name}}.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true,
              "inheritance": [
                {
                  "meta": "{{IF ADDONS().hasModel IS true}}",
                  "name": "Entity",
                  "generics": [
                    {
                      "dflt": "{{USE DEPENDENCY(WHERE type.isModel IS true).element.name}}"
                    }
                  ]
                }
              ],
              "methods": [
                {
                  "meta": "{{IF ADDONS().hasModel IS true}}",
                  "name": "toObject",
                  "params": [],
                  "return_type": "{{USE DEPENDENCY(WHERE type.isModel IS true).type}}"
                }
              ],
              "imports": [
                {
                  "list": [
                    "Entity",
                    "UnknownObject"
                  ],
                  "path": "@soapjs/soap"
                }
              ],
              "props": [
                {
                  "access": "public",
                  "default": "\"\"",
                  "name": "id",
                  "type": "string",
                  "optional": false
                },
                {
                  "access": "public",
                  "name": "rest",
                  "type": "UnknownObject",
                  "optional": true
                }
              ]
            }
          }
        },
        "entity_unit_tests": {
          "name_pattern": "{{pascal name}}EntityUnitTests",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/entity/__tests__/{{kebab name}}.unit.test.ts",
          "element_type": "unit_tests",
          "defaults": {}
        },
        "model": {
          "name_pattern": "{{pascal name}}{{pascal type}}Model",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/dtos/{{kebab name}}.dto.ts",
          "element_type": "type",
          "defaults": {
            "common": {
              "exp": true
            },
            "mongo": {
              "imports": [
                {
                  "list": [
                    "MongoDB"
                  ],
                  "path": "@soapjs/soap-node-mongo"
                }
              ],
              "props": [
                {
                  "name": "_id",
                  "type": "MongoDB.ObjectId",
                  "optional": true
                }
              ]
            },
            "json": {
              "imports": [],
              "props": [
                {
                  "name": "id",
                  "type": "string",
                  "optional": true
                }
              ]
            }
          }
        },
        "use_case": {
          "name_pattern": "{{pascal name}}UseCase",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/use-cases/{{kebab name}}.use-case.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true,
              "imports": [
                {
                  "list": [
                    "injectable",
                    "inject",
                    "UseCase",
                    "Result",
                    "Failure"
                  ],
                  "path": "@soapjs/soap"
                }
              ],
              "inheritance": [
                {
                  "name": "UseCase"
                }
              ],
              "methods": [
                {
                  "meta": "{{FLAG isExec}}",
                  "name": "execute",
                  "is_async": true
                }
              ]
            }
          }
        },
        "use_case_unit_tests": {
          "name_pattern": "{{pascal name}}UseCaseUnitTests",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/use-cases/__tests__/{{kebab name}}.use-case.unit.test.ts",
          "element_type": "unit_tests",
          "defaults": {}
        },
        "repository": {
          "name_pattern": "{{pascal name}}Repository",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/repositories/{{kebab name}}.repository.ts",
          "element_type": "abstract_class",
          "defaults": {
            "common": {
              "exp": true,
              "imports": [
                {
                  "list": [
                    "Repository",
                    "injectable"
                  ],
                  "path": "@soapjs/soap"
                }
              ],
              "inheritance": [
                {
                  "name": "Repository",
                  "generics": [
                    {
                      "dflt": "{{USE DEPENDENCY(WHERE type.isEntity IS true).element.name}}"
                    }
                  ]
                }
              ]
            }
          }
        },
        "repository_impl": {
          "name_pattern": "{{pascal name}}RepositoryImpl",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/repositories/{{kebab name}}.repository-impl.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true,
              "imports": [
                {
                  "list": [
                    "DataContext",
                    "Repository",
                    "RepositoryImpl"
                  ],
                  "path": "@soapjs/soap"
                }
              ],
              "inheritance": [
                {
                  "name": "RepositoryImpl",
                  "generics": [
                    {
                      "dflt": "{{USE DEPENDENCY(WHERE type.isEntity IS true).element.name}}"
                    },
                    {
                      "dflt": "{{USE DEPENDENCY(WHERE type.isModel IS true).element.name}}"
                    }
                  ]
                }
              ],
              "interfaces": [
                {
                  "name": "{{USE DEPENDENCY(WHERE type.isRepository IS true).element.name}}"
                }
              ],
              "ctor": {
                "supr": {
                  "params": [
                    {
                      "name": "{{USE DEPENDENCY(WHERE type.isModel IS true).type.type}}Context",
                      "type": "DataContext<{{USE DEPENDENCY(WHERE type.isEntity IS true).element.name}}, {{USE DEPENDENCY(WHERE type.type IS mongo).element.name}}>"
                    }
                  ]
                }
              }
            },
            "mongo": {
              "ctor": {
                "params": [
                  {
                    "name": "mongoContext",
                    "type": "DataContext<{{USE DEPENDENCY(WHERE type.isEntity IS true).element.name}}, {{USE DEPENDENCY(WHERE type.type IS mongo).element.name}}>"
                  }
                ]
              }
            },
            "mysql": {
              "ctor": {
                "params": [
                  {
                    "name": "mysqlContext",
                    "type": "DataContext<{{USE DEPENDENCY(WHERE type.isEntity IS true).element.name}}, {{USE DEPENDENCY(WHERE type.type IS mysql).element.name}}>"
                  }
                ]
              }
            }
          }
        },
        "repository_impl_unit_tests": {
          "name_pattern": "{{pascal name}}RepositoryImpl",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/repositories/__tests__/{{kebab name}}.repository-impl.unit.test.ts",
          "element_type": "unit_tests",
          "defaults": {}
        },
        "controller": {
          "name_pattern": "{{pascal name}}Controller",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/controllers/{{kebab name}}.controller.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true,
              "imports":[{
                "list": ["Result"],
                "path": "@soapjs/soap"
              }]
            }
          }
        },
        "controller_unit_tests": {
          "name_pattern": "{{pascal name}}ControllerUnitTests",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/controllers/__tests__/{{kebab name}}.controller.unit.test.ts",
          "element_type": "unit_tests",
          "defaults": {}
        },
        "route": {
          "name_pattern": "{{pascal name}}Route",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab name}}.route.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true,
              "imports": [
                {
                  "alias": "Soap",
                  "path": "@soapjs/soap"
                }
              ],
              "methods": [
                {
                  "meta": "{{FLAG isRouteFactoryMethod}}",
                  "name": "create",
                  "is_static": true,
                  "params": [
                    {
                      "name": "handler",
                      "type": "Soap.RouteHandler"
                    },
                    {
                      "name": "config",
                      "type": "Soap.Config"
                    }
                  ]
                }
              ]
            },
            "get": {
              "inheritance": [
                {
                  "name": "Soap.GetRoute"
                }
              ]
            },
            "post": {
              "inheritance": [
                {
                  "name": "Soap.PostRoute"
                }
              ]
            },
            "put": {
              "inheritance": [
                {
                  "name": "Soap.PutRoute"
                }
              ]
            },
            "patch": {
              "inheritance": [
                {
                  "name": "Soap.PatchRoute"
                }
              ]
            },
            "delete": {
              "inheritance": [
                {
                  "name": "Soap.DeleteRoute"
                }
              ],
              "props": []
            }
          }
        },
        "route_model": {
          "name_pattern": "{{pascal name}}{{pascal type}}Model",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab name}}.route-model.ts",
          "element_type": "type",
          "defaults": {
            "common": {
              "exp": true
            }
          }
        },
        "route_io": {
        "name_pattern": "{{pascal name}}RouteIO",
        "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/{{kebab name}}.route-io.ts",
        "element_type": "class",
        "defaults": {
          "common": {
            "exp": true,
            "imports": [
              {
                "list": [
                  "RouteIO",
                  "RouteResponse",
                  "RouteRequest",
                  "Result"
                ],
                "path": "@soapjs/soap"
              }
            ],
            "interfaces": [
              {
                "name": "RouteIO"
              }
            ],
            "methods": [
              {
                "meta": "{{FLAG mapToResponse}}",
                "name": "toResponse",
                "return_type": "{{USE ADDONS().response_type}}",
                "params": [
                  {
                    "name": "output",
                    "type": "Result<{{USE ADDONS().output_type.name}}>"
                  }
                ]
              },
              {
                "meta": "{{FLAG mapFromRequest}}",
                "name": "fromRequest",
                "return_type": "{{USE ADDONS().input_type}}",
                "params": [
                  {
                    "name": "request",
                    "type": "{{USE ADDONS().request_type}}"
                  }
                ]
              }
            ]
          }
        }
      },
        "route_schema": {
          "name_pattern": "{{pascal name}}RouteSchema",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/schemas/{{kebab name}}.route-schema.json",
          "element_type": "json",
          "defaults": {
            "common": {
              "exp": {
                "use_wildcard": true
              },
              "props": [
                {
                  "name":"$schema",
                  "type":"string",
                  "value":"http://json-schema.org/draft-07/schema#"
                },
                {
                  "name":"type",
                  "type":"string",
                  "value":"object"
                },
                {
                  "name":"properties",
                  "type":"object",
                  "value":{}
                },
                {
                  "name":"required",
                  "type":"Array<string>",
                  "value":[]
                },
                {
                  "name":"additionalProperties",
                  "type":"boolean",
                  "value":false
                }
              ]
            }
          }
        },
        "route_io_unit_tests": {
          "name_pattern": "{{pascal name}}RouteIO",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/routes/__tests__/{{kebab name}}.route-io.unit.test.ts",
          "element_type": "unit_tests",
          "defaults": {}
        },
        "toolset": {
          "name_pattern": "{{pascal name}}Toolset",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/{{kebab layer}}/tools/{{kebab name}}.tools.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true
            }
          }
        },
        "toolset_unit_tests": {
          "name_pattern": "{{pascal name}}ToolsetUnitTests",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/{{kebab layer}}/tools/__tests__/{{kebab name}}.tools.unit.test.ts",
          "element_type": "unit_tests",
          "defaults": {}
        },
        "service": {
          "name_pattern": "{{pascal name}}Service",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/domain/services/{{kebab name}}.service.ts",
          "element_type": "abstract_class",
          "defaults": {
            "common": {
              "exp": true
            }
          }
        },
        "service_impl": {
          "name_pattern": "{{pascal name}}ServiceImpl",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/services/{{kebab name}}.service-impl.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true
            }
          }
        },
        "service_impl_unit_tests": {
          "name_pattern": "{{pascal name}}ServiceImplUnitTests",
          "path_pattern": "{{root}}/endpoints/{{kebab endpoint}}/data/services/__tests__/{{kebab name}}.service-impl.unit.test.ts",
          "element_type": "unit_tests",
          "defaults": {}
        },
        "router": {
          "name_pattern": "Router",
          "path_pattern": "{{root}}/router.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true,
              "inheritance": [
                {
                  "name": "Soap.Router"
                }
              ],
              "methods": [
                {
                  "meta": "{{FLAG isConfigurator}}",
                  "name": "configure",
                  "params": [],
                  "return_type": "void"
                }
              ],
              "imports": [
                {
                  "alias": "Soap",
                  "path": "@soapjs/soap"
                }
              ]
            }
          }
        },
        "container": {
          "name_pattern": "Dependencies",
          "path_pattern": "{{root}}/dependencies.ts",
          "element_type": "class",
          "defaults": {
            "common": {
              "exp": true,
              "methods": [
                {
                  "meta": "{{FLAG isConfigurator}}",
                  "is_async": true,
                  "name": "configure",
                  "params": [],
                  "return_type": "void"
                }
              ],
              "imports": [
                {
                  "meta": "{{FLAG isDefaultRepositoryImpl}}",
                  "list": [
                    "RepositoryImpl"
                  ],
                  "path": "@soapjs/soap"
                }
              ]
            },
            "mongo": {
              "imports": [
                {
                  "meta": "{{FLAG isSource}}",
                  "list": [
                    "MongoSource"
                  ],
                  "path": "@soapjs/soap-node-mongo"
                },
                {
                  "meta": "{{FLAG isCollection}}",
                  "list": [
                    "MongoCollection"
                  ],
                  "path": "@soapjs/soap-node-mongo"
                },
                {
                  "meta": "{{FLAG isQueryFactory}}",
                  "list": [
                    "MongoQueryFactory"
                  ],
                  "path": "@soapjs/soap-node-mongo"
                }
              ]
            },
            "mysql": {
              "imports": [
                {
                  "meta": "{{FLAG isSource}}",
                  "list": [
                    "MySqlSource"
                  ],
                  "path": "@soapjs/soap-node-mysql"
                },
                {
                  "meta": "{{FLAG isCollection}}",
                  "list": [
                    "MySqlCollection"
                  ],
                  "path": "@soapjs/soap-node-mysql"
                },
                {
                  "meta": "{{FLAG isQueryFactory}}",
                  "list": [
                    "MySqlQueryFactory"
                  ],
                  "path": "@soapjs/soap-node-mysql"
                }
              ]
            },
            "reedis": {
              "imports": [
                {
                  "meta": "{{FLAG isSource}}",
                  "list": [
                    "RedisSource"
                  ],
                  "path": "@soapjs/soap-node-redis"
                },
                {
                  "meta": "{{FLAG isCollection}}",
                  "list": [
                    "RedisCollection"
                  ],
                  "path": "@soapjs/soap-node-redis"
                },
                {
                  "meta": "{{FLAG isQueryFactory}}",
                  "list": [
                    "RedisQueryFactory"
                  ],
                  "path": "@soapjs/soap-node-redis"
                }
              ]
            }
          }
        },
        "launcher": {
          "name_pattern": "Launcher",
          "path_pattern": "{{root}}/index.ts"
        },
        "config": {
          "name_pattern": "Config",
          "path_pattern": "{{root}}/config.ts"
        }
      }
    }
  ],
  "databases": [
    {
      "name": "MongoDB",
      "alias": "mongo",
      "case_style": "snake",
      "mappings": [
        {
          "db_type": "ObjectID",
          "code_type": "ObjectID"
        },
        {
          "db_type": "Long",
          "code_type": "bigint"
        },
        {
          "db_type": "ISODate",
          "code_type": "Date"
        },
        {
          "db_type": "Timestamp",
          "code_type": "Timestamp"
        },
        {
          "db_type": "Regex",
          "code_type": "RegExp"
        },
        {
          "db_type": "Binary",
          "code_type": "Buffer"
        }
      ]
    },
    {
      "name": "MySQL",
      "alias": "mysql",
      "case_style": "snake",
      "mappings": [
        {
          "db_type": "DATETIME",
          "code_type": "Date"
        }
      ]
    },
    {
      "name": "Redis",
      "alias": "redis",
      "case_style": "snake",
      "mappings": []
    }
  ],
  "ioc": [
    {
      "name": "Inversify",
      "alias": "inversify"
    },
    {
      "name": "Soap Singleton Container",
      "alias": "singleton"
    }
  ],
  "message_brokers": [
    {
      "name": "RabbitMQ",
      "alias": "rabbit"
    }
  ],
  "auth_frameworks": [
    {
      "name": "PassportJS",
      "alias": "passport"
    }
  ],
  "test_frameworks": [
    {
      "name": "Jest",
      "alias": "jest"
    }
  ],
  "docs_frameworks": [
    {
      "name": "ReDoc",
      "alias": "redoc"
    }
  ],
  "valid_frameworks": [
    {
      "name": "AJV",
      "alias": "ajv"
    },
    {
      "name": "Joi",
      "alias": "joi"
    }
  ],
  "request_collections": [
    {
      "name": "Postman",
      "alias": "postman"
    }
  ],
  "platforms": [],
  "web_frameworks": [
    {
      "name": "Express.js",
      "alias": "express"
    },
    {
      "name": "AWS Serverless",
      "alias": "aws"
    },
    {
      "name": "NestJS",
      "alias": "nest"
    }
  ]
}